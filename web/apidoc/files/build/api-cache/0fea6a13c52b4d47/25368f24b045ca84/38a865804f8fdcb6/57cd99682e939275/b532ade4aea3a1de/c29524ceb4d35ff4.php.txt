<?php 
/* Cachekey: cache/stash_default/documentation\api\php\f94cb42b44a043e0df58ef0ae8cbce82/ */
/* Type: array */
/* Expiration: 2019-04-13T20:17:09+00:00 */



$loaded = true;
$expiration = 1555186629;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

