<?php 
/* Cachekey: cache/stash_default/documentation\api\php\0a3e2815d49a7dda2727e1e1f24662c2/ */
/* Type: array */
/* Expiration: 2019-04-13T13:25:02+00:00 */



$loaded = true;
$expiration = 1555161902;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

