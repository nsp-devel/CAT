<?php 
/* Cachekey: cache/stash_default/documentation\api\php\81e7c93be2e450c4efcd2c0e60fd6870/ */
/* Type: array */
/* Expiration: 2019-04-13T11:59:28+00:00 */



$loaded = true;
$expiration = 1555156768;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554789124;

