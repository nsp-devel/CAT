<?php 
/* Cachekey: cache/stash_default/documentation\api\php\9754fdab76004ed67230bae95770c032/ */
/* Type: array */
/* Expiration: 2019-04-13T20:14:02+00:00 */



$loaded = true;
$expiration = 1555186442;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554789030;

