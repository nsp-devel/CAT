<?php 
/* Cachekey: cache/stash_default/documentation\api\php\74e5374afeb4a585b5b47ca7c9c36cbb/ */
/* Type: array */
/* Expiration: 2019-04-14T05:38:28+00:00 */



$loaded = true;
$expiration = 1555220308;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

