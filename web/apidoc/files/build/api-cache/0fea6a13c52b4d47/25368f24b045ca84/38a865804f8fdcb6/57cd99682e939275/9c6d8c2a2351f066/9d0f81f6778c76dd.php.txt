<?php 
/* Cachekey: cache/stash_default/documentation\api\php\c6d074bd5c63d9a4db30b9d8f1ed8d8b/ */
/* Type: array */
/* Expiration: 2019-04-13T18:51:21+00:00 */



$loaded = true;
$expiration = 1555181481;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554789030;

