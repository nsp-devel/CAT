<?php 
/* Cachekey: cache/stash_default/documentation\api\php\1fc33599f8442f3f7c301900424b983a/ */
/* Type: array */
/* Expiration: 2019-04-14T04:56:33+00:00 */



$loaded = true;
$expiration = 1555217793;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

