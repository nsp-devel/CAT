<?php 
/* Cachekey: cache/stash_default/documentation\api\php\039da402db98557c7a4505c5e4cc2809/ */
/* Type: array */
/* Expiration: 2019-04-14T03:36:52+00:00 */



$loaded = true;
$expiration = 1555213012;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

