<?php 
/* Cachekey: cache/stash_default/documentation\api\php\4ef1082bb0ae52306a0b66cb8bfc8581/ */
/* Type: array */
/* Expiration: 2019-04-13T12:26:14+00:00 */



$loaded = true;
$expiration = 1555158374;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode('O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:37:"This file contains the Devices class.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:1:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:13:"ModuleWriting";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:23;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"d60fe2448198383e6b20a9937c4f5c8d";s:39:" phpDocumentor\Reflection\Php\File name";s:20:"Devices-template.php";s:39:" phpDocumentor\Reflection\Php\File path";s:28:"devices/Devices-template.php";s:41:" phpDocumentor\Reflection\Php\File source";s:28871:"<?php

/*
 * *****************************************************************************
 * Contributions to this work were made on behalf of the GÉANT project, a 
 * project that has received funding from the European Union’s Framework 
 * Programme 7 under Grant Agreements No. 238875 (GN3) and No. 605243 (GN3plus),
 * Horizon 2020 research and innovation programme under Grant Agreements No. 
 * 691567 (GN4-1) and No. 731122 (GN4-2).
 * On behalf of the aforementioned projects, GEANT Association is the sole owner
 * of the copyright in all material which was developed by a member of the GÉANT
 * project. GÉANT Vereniging (Association) is registered with the Chamber of 
 * Commerce in Amsterdam with registration number 40535155 and operates in the 
 * UK as a branch of GÉANT Vereniging.
 * 
 * Registered office: Hoekenrode 3, 1102BR Amsterdam, The Netherlands. 
 * UK branch address: City House, 126-130 Hills Road, Cambridge CB2 1PQ, UK
 *
 * License: see the web/copyright.inc.php file in the file structure or
 *          <base_url>/copyright.php after deploying the software
 */

/**
 * This file contains the Devices class.
 *
 * @package ModuleWriting
 */

namespace devices;

/**
 * The Devices class holds a list of all devices the CAT knows about
 * 
 * @author Tomasz Wolniewicz <twoln@umk.pl>
 * 
 * @license see LICENSE file in root directory
 * 
 * @package ModuleWriting
 */
class Devices extends \core\common\Entity {

    const SUPPORT_RSA = 'RSA';
    const SUPPORT_ECDSA = 'ECDSA';

    /**
     * This array lists available configuration options for local device management.
     * Values from this array will be taken as defaults.
     * Do not modify this array unless you really konw what you are doing.
     * Default values will be overriden by the settings of options inside
     * each device definition
     *
     * - 'sign' - if set to nonzero will cause installer signing if the module
     *         supports this. The default settings for Microsoft and Apple systems
     *         is 1, since without signing, installation makes liitle sense. Be aware
     *         that you need to set up signers and have proper certificates, if
     *         you do not want to do that and you are just testing CAT, then you can
     *         switch sign to 0, of course.
     * - 'no_cache' if defined and equal to 1 will block installer caching - useful
     *         for device development, should not be used in production
     * - 'hidden' if defined and equal to 1 will hide the device form listing - 
     *         useful for device development 
     * - 'redirect if defined and equal to 1 will only show the device on the listing
     *         if device redirect has been defined by the admin
     * - 'message' if defined will cause a display of the contents of this option as
     *         an additional warning
     * - 'sb_message' aplickable only in the distribuition of Silverbullet profiles,
     *         if defined will cause a display of the contents of this option as
     *         an additional message. If the 'message' option is also defined then
     *         the sb_message will be displayed in the same window AFTER the contents
     *         of the 'message' option if that one.
     * - 'device_id' - used in building the installer filename; when this option
     *         is not defined, the filename will use the index from 
     *         the listDevices array; when defined and not empty, it will be 
     *         used in place of this index; when defined as empty will cause
     *         the omission of the device part the filename.
     *         The default is unset, so it is not listed in the Options array.
     * - 'args' - currently this option can use only one value - 'gl' and this will be used
     *         only for Windows 8 and Windows 10 installers. Setting this option 
     *         turns on usage of GEANTLink for TTLS support. This option should be used
     *         for Windows 10 where TTLS is broken, but not for Windows 8 where the 
     *         system method works well.
     * - 'mime' - used to set the MIME type of the installer file;
     *         if not set will default to the value provided by PHP finfo.
     *         The default is unset, so it is not listed in the Options array.
     */
    public static $Options = [
        'sign' => 0,
        'no_cache' => 0,
        'hidden' => 0,
        'redirect' => 0,
        'clientcert' => Devices::SUPPORT_RSA,
    ];

    /**
     * Each device is defined as a sub-array within this array
     *
     * Except for changing/adding things inside the options arrays, do not modify
     * this array unless you really know what you are doing.
     *
     * Beware that the entrance page of CAT contains a rolling ad which 
     * lists some devices, and also states that certain device modules are signed,
     * you should keep this information in sync with your settings in this file
     * See web/user/roll.php for settings and more information.
     *
     * Settings
     * - 'group' - caused device grouping used by the entrance screen
     * - 'display' is the name shown on the GUI button
     * - 'match' - a regular expression which will be matched against HTTP_USER_AGENT
     *             to discover the operating system of the user
     * - 'directory' is the subdirectory of devices directory, where
     *       the device module resides
     * - 'module' is the name of the module class, the same name with .php
     *       added will be used as the name of the main include file for the module
     * - 'signer' if defined points to a script which will sign a file. 
     *       The script must be located in the signer subdirectory of CAT.
     *       The first argument of this script must be the input file name, 
     *       the second - the signed file filename. Signer will not be used
     *       unless the sign option is set to nonzero.
     * - 'options' - the array of options overriding the default settings.
     *       See the descripption of options above.
     *
     * @example devices/devices-template.php file listing
     * @return array the device modules
     */
    public static function listDevices() {
        \core\common\Entity::intoThePotatoes();
        $retArray = [
            'w10' => [
                'group' => "microsoft",
                'display' => _("MS Windows 10"),
                'match' => 'Windows NT 10',
                'directory' => 'ms',
                'module' => 'W8_10',
                'signer' => 'ms_windows_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'W10',
                    'args' => 'gl',
                    'mime' => 'application/x-dosexec',
                ],
            ],
            'w8' => [
                'group' => "microsoft",
                'display' => _("MS Windows 8, 8.1"),
                'match' => 'Windows NT 6[._][23]',
                'directory' => 'ms',
                'module' => 'W8_10',
                'signer' => 'ms_windows_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'W8',
                    'mime' => 'application/x-dosexec',
                ],
            ],
            'w7' => [
                'group' => "microsoft",
                'display' => _("MS Windows 7"),
                'match' => 'Windows NT 6[._]1',
                'directory' => 'ms',
                'module' => 'Vista7',
                'signer' => 'ms_windows_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'W7',
                    'mime' => 'application/x-dosexec',
                ],
            ],
            'vista' => [
                'group' => "microsoft",
                'display' => _("MS Windows Vista"),
                'match' => 'Windows NT 6[._]0',
                'directory' => 'ms',
                'module' => 'Vista7',
                'signer' => 'ms_windows_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'Vista',
                    'mime' => 'application/x-dosexec',
                ],
            ],
            'win-rt' => [
                'group' => "microsoft",
                'display' => _("Windows RT"),
                'directory' => 'redirect_dev',
                'module' => 'RedirectDev',
                'options' => [
                    'hidden' => 0,
                    'redirect' => 1,
                ],
            ],
            'apple_hi_sierra' => array(
                'group' => "apple",
                'display' => _("Apple macOS High Sierra"),
                'match' => 'Mac OS X 10[._]13',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_os_x',
                'signer' => 'mobileconfig_sign',
                'options' => array(
                    'sign' => 1,
                    'device_id' => 'OS_X',
                    'mime' => 'application/x-apple-aspen-config',
                    'clientcert' => Devices::SUPPORT_ECDSA,
                    'sb_message' => _("During the installation you will be first asked to enter settings for certificate and there you need to enter the import PIN shown on this page. Later you will be prompted to enter your password to allow making changes to the profile, this time it is your computer password."),
                ),
            ),
            'apple_sierra' => array(
                'group' => "apple",
                'display' => _("Apple macOS Sierra"),
                'match' => 'Mac OS X 10[._]12',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_os_x',
                'signer' => 'mobileconfig_sign',
                'options' => array(
                    'sign' => 1,
                    'device_id' => 'OS_X',
                    'mime' => 'application/x-apple-aspen-config',
                    'sb_message' => _("During the installation you will be first asked to enter settings for certificate and there you need to enter the import PIN shown on this page. Later you will be prompted to enter your password to allow making changes to the profile, this time it is your computer password."),
                ),
            ),
            'apple_el_cap' => [
                'group' => "apple",
                'display' => _("Apple OS X El Capitan"),
                'match' => 'Mac OS X 10[._]11',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_os_x',
                'signer' => 'mobileconfig_sign',
                'options' => array(
                    'sign' => 1,
                    'device_id' => 'OS_X',
                    'mime' => 'application/x-apple-aspen-config',
                    'sb_message' => _("During the installation you will be first asked to enter settings for certificate and there you need to enter the import PIN shown on this page. Later you will be prompted to enter your password to allow making changes to the profile, this time it is your computer password."),
                ),
            ],
            'apple_yos' => [
                'group' => "apple",
                'display' => _("Apple OS X Yosemite"),
                'match' => 'Mac OS X 10[._]10',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_os_x',
                'signer' => 'mobileconfig_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'OS_X',
                    'mime' => 'application/x-apple-aspen-config',
                    'sb_message' => _("During the installation you will be first asked to enter settings for certificate and there you need to enter the import PIN shown on this page. Later you will be prompted to enter your password to allow making changes to the profile, this time it is your computer password."),
                ],
            ],
            'apple_mav' => [
                'group' => "apple",
                'display' => _("Apple OS X Mavericks"),
                'match' => 'Mac OS X 10[._]9',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_os_x',
                'signer' => 'mobileconfig_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'OS_X',
                    'mime' => 'application/x-apple-aspen-config',
                    'sb_message' => _("During the installation you will be first asked to enter settings for certificate and there you need to enter the import PIN shown on this page. Later you will be prompted to enter your password to allow making changes to the profile, this time it is your computer password."),
                ],
            ],
            'apple_m_lion' => [
                'group' => "apple",
                'display' => _("Apple OS X Mountain Lion"),
                'match' => 'Mac OS X 10[._]8',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_os_x',
                'signer' => 'mobileconfig_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'OS_X',
                    'mime' => 'application/x-apple-aspen-config',
                    'sb_message' => _("During the installation you will be first asked to enter settings for certificate and there you need to enter the import PIN shown on this page. Later you will be prompted to enter your password to allow making changes to the profile, this time it is your computer password."),
                ],
            ],
            'apple_lion' => [
                'group' => "apple",
                'display' => _("Apple OS X Lion"),
                'match' => 'Mac OS X 10[._]7',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_os_x',
                'signer' => 'mobileconfig_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'OS_X',
                    'mime' => 'application/x-apple-aspen-config',
                    'sb_message' => _("During the installation you will be first asked to enter settings for certificate and there you need to enter the import PIN shown on this page. Later you will be prompted to enter your password to allow making changes to the profile, this time it is your computer password."),
                ],
            ],
            'mobileconfig12' => [
                'group' => "apple",
                'display' => _("Apple iOS mobile devices"),
                'match' => '(iPad|iPhone|iPod);.*OS (1[2-9])_',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_ios12plus',
                'signer' => 'mobileconfig_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'iOS',
                    'mime' => 'application/x-apple-aspen-config',
                    'sb_message' => _("During the installation you will be first asked to enter your passcode - this is your device security code! Later on you will be prompted for the password to the certificate and there you need to enter the import PIN shown on this page."),
                ],
            ],
            'mobileconfig' => [
                'group' => "apple",
                'display' => _("Apple iOS mobile devices (iOS 7-11)"),
                'match' => '(iPad|iPhone|iPod);.*OS ([7-9]|1[0-1])_',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_ios7plus',
                'signer' => 'mobileconfig_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'iOS',
                    'mime' => 'application/x-apple-aspen-config',
                    'sb_message' => _("During the installation you will be first asked to enter your passcode - this is your device security code! Later on you will be prompted for the password to the certificate and there you need to enter the import PIN shown on this page."),
                ],
            ],
            'mobileconfig-56' => [
                'group' => "apple",
                'display' => _("Apple iOS mobile devices (iOS 5 and 6)"),
                'match' => '(iPad|iPhone|iPod);.*OS [56]_',
                'directory' => 'apple_mobileconfig',
                'module' => 'mobileconfig_ios5plus',
                'signer' => 'mobileconfig_sign',
                'options' => [
                    'sign' => 1,
                    'device_id' => 'iOS',
                    'mime' => 'application/x-apple-aspen-config',
                ],
            ],
            'linux' => [
                'group' => "linux",
                'display' => _("Linux"),
                'match' => 'Linux(?!.*Android)',
                'directory' => 'linux',
                'module' => 'Linux',
                'options' => [
                    'mime' => 'application/x-sh',
                ],
            ],
            'chromeos' => [
                'group' => "chrome",
                'display' => _("Chrome OS"),
                'match' => 'CrOS',
                'directory' => 'chromebook',
                'module' => 'chromebook',
                'options' => [
                    'mime' => 'application/x-onc',
                    'message' => sprintf(_("After downloading the file, open the Chrome browser and browse to this URL: <a href='chrome://net-internals/#chromeos'>chrome://net-internals/#chromeos</a>. Then, use the 'Import ONC file' button. The import is silent; the new network definitions will be added to the preferred networks.")),
                ],
            ],
            'android_pie' => [
                'group' => "android",
                'display' => _("Android 9.0 Pie"),
                'match' => 'Android 9',
                'directory' => 'xml',
                'module' => 'Lollipop',
                'options' => [
                    'mime' => 'application/eap-config',
                    'message' => sprintf(_("Before you proceed with installation on Android systems, please make sure that you have installed the %s application. This application is available from %s, %s and %s, and will use the configuration file downloaded from CAT to create all necessary settings."),
                            "eduroamCAT",
                            "<a target='_blank' href='https://play.google.com/store/apps/details?id=uk.ac.swansea.eduroamcat'>Google Play</a>",
                            "<a target='_blank' href='https://www.amazon.com/dp/B01EACCX0S/'>Amazon Appstore</a>",
                            "<a target='_blank' href='eduroamCAT-stable.apk'>" . _("as local download") . "</a>"),
                ],
            ],
            'android_oreo' => [
                'group' => "android",
                'display' => _("Android 8.0 Oreo"),
                'match' => 'Android 8',
                'directory' => 'xml',
                'module' => 'Lollipop',
                'options' => [
                    'mime' => 'application/eap-config',
                    'message' => sprintf(_("Before you proceed with installation on Android systems, please make sure that you have installed the %s application. This application is available from %s, %s and %s, and will use the configuration file downloaded from CAT to create all necessary settings."),
                            "eduroamCAT",
                            "<a target='_blank' href='https://play.google.com/store/apps/details?id=uk.ac.swansea.eduroamcat'>Google Play</a>",
                            "<a target='_blank' href='https://www.amazon.com/dp/B01EACCX0S/'>Amazon Appstore</a>",
                            "<a target='_blank' href='eduroamCAT-stable.apk'>" . _("as local download") . "</a>"),
                ],
            ],
            'android_nougat' => [
                'group' => "android",
                'display' => _("Android 7.0 Nougat"),
                'match' => 'Android 7',
                'directory' => 'xml',
                'module' => 'Lollipop',
                'options' => [
                    'mime' => 'application/eap-config',
                    'message' => sprintf(_("Before you proceed with installation on Android systems, please make sure that you have installed the %s application. This application is available from %s, %s and %s, and will use the configuration file downloaded from CAT to create all necessary settings."),
                            "eduroamCAT",
                            "<a target='_blank' href='https://play.google.com/store/apps/details?id=uk.ac.swansea.eduroamcat'>Google Play</a>",
                            "<a target='_blank' href='https://www.amazon.com/dp/B01EACCX0S/'>Amazon Appstore</a>",
                            "<a target='_blank' href='eduroamCAT-stable.apk'>" . _("as local download") . "</a>"),
                ],
            ],
            'android_marshmallow' => [
                'group' => "android",
                'display' => _("Android 6.0 Marshmallow"),
                'match' => 'Android 6',
                'directory' => 'xml',
                'module' => 'Lollipop',
                'options' => [
                    'mime' => 'application/eap-config',
                    'message' => sprintf(_("Before you proceed with installation on Android systems, please make sure that you have installed the %s application. This application is available from %s, %s and %s, and will use the configuration file downloaded from CAT to create all necessary settings."),
                            "eduroamCAT",
                            "<a target='_blank' href='https://play.google.com/store/apps/details?id=uk.ac.swansea.eduroamcat'>Google Play</a>",
                            "<a target='_blank' href='https://www.amazon.com/dp/B01EACCX0S/'>Amazon Appstore</a>",
                            "<a target='_blank' href='eduroamCAT-stable.apk'>" . _("as local download") . "</a>"),
                ],
            ],
            'android_lollipop' => [
                'group' => "android",
                'display' => _("Android 5.0 Lollipop"),
                'match' => 'Android 5',
                'directory' => 'xml',
                'module' => 'Lollipop',
                'options' => [
                    'mime' => 'application/eap-config',
                    'message' => sprintf(_("Before you proceed with installation on Android systems, please make sure that you have installed the %s application. This application is available from %s, %s and %s, and will use the configuration file downloaded from CAT to create all necessary settings."),
                            "eduroamCAT",
                            "<a target='_blank' href='https://play.google.com/store/apps/details?id=uk.ac.swansea.eduroamcat'>Google Play</a>",
                            "<a target='_blank' href='https://www.amazon.com/dp/B01EACCX0S/'>Amazon Appstore</a>",
                            "<a target='_blank' href='eduroamCAT-stable.apk'>" . _("as local download") . "</a>"),
                ],
            ],
            'android_kitkat' => [
                'group' => "android",
                'display' => _("Android 4.4 KitKat"),
                'match' => 'Android 4\.[4-9]',
                'directory' => 'xml',
                'module' => 'KitKat',
                'options' => [
                    'mime' => 'application/eap-config',
                    'message' => sprintf(_("Before you proceed with installation on Android systems, please make sure that you have installed the %s application. This application is available from %s, %s and %s, and will use the configuration file downloaded from CAT to create all necessary settings."),
                            "eduroamCAT",
                            "<a target='_blank' href='https://play.google.com/store/apps/details?id=uk.ac.swansea.eduroamcat'>Google Play</a>",
                            "<a target='_blank' href='https://www.amazon.com/dp/B01EACCX0S/'>Amazon Appstore</a>",
                            "<a target='_blank' href='eduroamCAT-stable.apk'>" . _("as local download") . "</a>"),
                ],
            ],
            'android_43' => [
                'group' => "android",
                'display' => _("Android 4.3"),
                'match' => 'Android 4\.3',
                'directory' => 'xml',
                'module' => 'KitKat',
                'options' => [
                    'mime' => 'application/eap-config',
                    'message' => sprintf(_("Before you proceed with installation on Android systems, please make sure that you have installed the %s application. This application is available from %s, %s and %s, and will use the configuration file downloaded from CAT to create all necessary settings."),
                            "eduroamCAT",
                            "<a target='_blank' href='https://play.google.com/store/apps/details?id=uk.ac.swansea.eduroamcat'>Google Play</a>",
                            "<a target='_blank' href='https://www.amazon.com/dp/B01EACCX0S/'>Amazon Appstore</a>",
                            "<a target='_blank' href='eduroamCAT-stable.apk'>" . _("as local download") . "</a>"),
                ],
            ],
            'android_legacy' => [
                'group' => "android",
                'display' => _("Android"),
                'match' => 'Android',
                'directory' => 'redirect_dev',
                'module' => 'RedirectDev',
                'options' => [
                    'redirect' => 1,
                ],
            ],
            'eap-config' => [
                'group' => "eap-config",
                'display' => _("EAP config"),
                'directory' => 'xml',
                'module' => 'XML_ALL',
                'options' => [
                    'mime' => 'application/eap-config',
                    'message' => sprintf(_("This option provides a generic EAP config XML file, which can be consumed by dedicated applications like eduroamCAT for Android and Linux platforms. This is still an experimental feature.")),
                ],
            ],
            'test' => [
                'group' => "other",
                'display' => _("Test"),
                'directory' => 'test_module',
                'module' => 'TestModule',
                'options' => [
                    'hidden' => 1,
                ],
            ],
                /*

                  'xml-ttls-pap'=>array(
                  'group' => "generic",
                  'display'=>_("Generic profile TTLS-PAP"),
                  'directory'=>'xml',
                  'module'=>'XML_TTLS_PAP',
                  'options'=>array(
                  'mime'=>'application/eap-config',
                  ),
                  ),

                  'xml-ttls-mschap2'=>array(
                  'group' => "generic",
                  'display'=>_("Generic profile TTLS-MSCHAPv2"),
                  'directory'=>'xml',
                  'module'=>'XML_TTLS_MSCHAP2',
                  'options'=>array(
                  'mime'=>'application/eap-config',
                  ),
                  ),

                  'xml-peap'=>array(
                  'group' => "generic",
                  'display'=>_("Generic profile PEAP"),
                  'directory'=>'xml',
                  'module'=>'XML_PEAP',
                  'options'=>array(
                  'mime'=>'application/eap-config',
                  ),
                  ),

                  'xml-tls'=>array(
                  'group' => "generic",
                  'display'=>_("Generic profile TLS"),
                  'directory'=>'xml',
                  'module'=>'XML_TLS',
                  'options'=>array(
                  'mime'=>'application/eap-config',
                  ),
                  ),

                  'xml-pwd'=>array(
                  'group' => "generic",
                  'display'=>_("Generic profile PWD"),
                  'directory'=>'xml',
                  'module'=>'XML_PWD',
                  'options'=>array(
                  'mime'=>'application/eap-config',
                  ),
                  ),
                  'xml-all'=>array(
                  'group' => "generic",
                  'display'=>_("Generic profile ALL EAPs"),
                  'directory'=>'xml',
                  'module'=>'XML_ALL',
                  'options'=>array(
                  'mime'=>'application/eap-config',
                  ),
                  ),
                 */
        ];
        \core\common\Entity::outOfThePotatoes();
        return $retArray;
    }

}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:1:{s:8:"\devices";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:8:"\devices";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"devices";}}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:16:"\devices\Devices";O:35:"phpDocumentor\Reflection\Php\Class_":11:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:16:"\devices\Devices";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Devices";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:65:"The Devices class holds a list of all devices the CAT knows about";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:3:{i:0;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:17:"Tomasz Wolniewicz";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:12:"twoln@umk.pl";s:14:" * description";N;}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"license";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:34:"see LICENSE file in root directory";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:2;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:13:"ModuleWriting";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:7:"devices";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:31;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:19:"\core\common\Entity";s:36:" phpDocumentor\Reflection\Fqsen name";s:6:"Entity";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:2:{s:29:"\devices\Devices::SUPPORT_RSA";O:37:"phpDocumentor\Reflection\Php\Constant":4:{s:44:" phpDocumentor\Reflection\Php\Constant fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:29:"\devices\Devices::SUPPORT_RSA";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"SUPPORT_RSA";}s:47:" phpDocumentor\Reflection\Php\Constant docBlock";N;s:44:" phpDocumentor\Reflection\Php\Constant value";s:3:"RSA";s:47:" phpDocumentor\Reflection\Php\Constant location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:42;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}}s:31:"\devices\Devices::SUPPORT_ECDSA";O:37:"phpDocumentor\Reflection\Php\Constant":4:{s:44:" phpDocumentor\Reflection\Php\Constant fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:31:"\devices\Devices::SUPPORT_ECDSA";s:36:" phpDocumentor\Reflection\Fqsen name";s:13:"SUPPORT_ECDSA";}s:47:" phpDocumentor\Reflection\Php\Constant docBlock";N;s:44:" phpDocumentor\Reflection\Php\Constant value";s:5:"ECDSA";s:47:" phpDocumentor\Reflection\Php\Constant location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:43;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}}}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:1:{s:26:"\devices\Devices::$Options";O:37:"phpDocumentor\Reflection\Php\Property":7:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:26:"\devices\Devices::$Options";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Options";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:77:"This array lists available configuration options for local device management.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:2424:"Values from this array will be taken as defaults.
Do not modify this array unless you really konw what you are doing.
Default values will be overriden by the settings of options inside
each device definition

- 'sign' - if set to nonzero will cause installer signing if the module
        supports this. The default settings for Microsoft and Apple systems
        is 1, since without signing, installation makes liitle sense. Be aware
        that you need to set up signers and have proper certificates, if
        you do not want to do that and you are just testing CAT, then you can
        switch sign to 0, of course.
- 'no_cache' if defined and equal to 1 will block installer caching - useful
        for device development, should not be used in production
- 'hidden' if defined and equal to 1 will hide the device form listing -
        useful for device development
- 'redirect if defined and equal to 1 will only show the device on the listing
        if device redirect has been defined by the admin
- 'message' if defined will cause a display of the contents of this option as
        an additional warning
- 'sb_message' aplickable only in the distribuition of Silverbullet profiles,
        if defined will cause a display of the contents of this option as
        an additional message. If the 'message' option is also defined then
        the sb_message will be displayed in the same window AFTER the contents
        of the 'message' option if that one.
- 'device_id' - used in building the installer filename; when this option
        is not defined, the filename will use the index from
        the listDevices array; when defined and not empty, it will be
        used in place of this index; when defined as empty will cause
        the omission of the device part the filename.
        The default is unset, so it is not listed in the Options array.
- 'args' - currently this option can use only one value - 'gl' and this will be used
        only for Windows 8 and Windows 10 installers. Setting this option
        turns on usage of GEANTLink for TTLS support. This option should be used
        for Windows 10 where TTLS is broken, but not for Windows 8 where the
        system method works well.
- 'mime' - used to set the MIME type of the installer file;
        if not set will default to the value provided by PHP finfo.
        The default is unset, so it is not listed in the Options array.";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";r:58;s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:45;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";s:99:"[sign => 0, no_cache => 0, hidden => 0, redirect => 0, clientcert => \devices\Devices::SUPPORT_RSA]";s:45:" phpDocumentor\Reflection\Php\Property static";b:1;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:86;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}}}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:1:{s:31:"\devices\Devices::listDevices()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:55:"Each device is defined as a sub-array within this array";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:1328:"Except for changing/adding things inside the options arrays, do not modify
this array unless you really know what you are doing.

Beware that the entrance page of CAT contains a rolling ad which
lists some devices, and also states that certain device modules are signed,
you should keep this information in sync with your settings in this file
See web/user/roll.php for settings and more information.

Settings
- 'group' - caused device grouping used by the entrance screen
- 'display' is the name shown on the GUI button
- 'match' - a regular expression which will be matched against HTTP_USER_AGENT
            to discover the operating system of the user
- 'directory' is the subdirectory of devices directory, where
      the device module resides
- 'module' is the name of the module class, the same name with .php
      added will be used as the name of the main include file for the module
- 'signer' if defined points to a script which will sign a file.
      The script must be located in the signer subdirectory of CAT.
      The first argument of this script must be the input file name,
      the second - the signed file filename. Signer will not be used
      unless the sign option is set to nonzero.
- 'options' - the array of options overriding the default settings.
      See the descripption of options above.";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:2:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"example";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:41:"devices/devices-template.php file listing";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Return_":3:{s:7:" * name";s:6:"return";s:52:" phpDocumentor\Reflection\DocBlock\Tags\Return_ type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":1:{s:46:" phpDocumentor\Reflection\Types\Compound types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}}}s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:18:"the device modules";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";r:58;s:43:" phpDocumentor\Reflection\DocBlock location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:94;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:31:"\devices\Devices::listDevices()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"listDevices";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:1;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:125;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:40;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}'));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

