<?php 
/* Cachekey: cache/stash_default/documentation\api\php\74975d5da40d31a286b6808db7c43555/ */
/* Type: array */
/* Expiration: 2019-04-13T16:39:20+00:00 */



$loaded = true;
$expiration = 1555173560;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

