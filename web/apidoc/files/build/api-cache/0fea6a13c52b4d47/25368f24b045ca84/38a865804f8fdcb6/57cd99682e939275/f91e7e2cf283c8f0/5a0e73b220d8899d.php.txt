<?php 
/* Cachekey: cache/stash_default/documentation\api\php\1c61c7a9849f90bd1a0838afbe57b0e9/ */
/* Type: array */
/* Expiration: 2019-04-13T16:25:53+00:00 */



$loaded = true;
$expiration = 1555172753;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode('TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjNmMzRhNTJjZGU0NjJmZWQ2YzhmNWE0M2JkYmVmNDc0IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTY6InJhZGl1c190ZXN0cy5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czoyNToid2ViL2RpYWcvcmFkaXVzX3Rlc3RzLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTg0NDY6Ijw/cGhwCi8qCiAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIENvbnRyaWJ1dGlvbnMgdG8gdGhpcyB3b3JrIHdlcmUgbWFkZSBvbiBiZWhhbGYgb2YgdGhlIEfDiUFOVCBwcm9qZWN0LCBhIAogKiBwcm9qZWN0IHRoYXQgaGFzIHJlY2VpdmVkIGZ1bmRpbmcgZnJvbSB0aGUgRXVyb3BlYW4gVW5pb27igJlzIEZyYW1ld29yayAKICogUHJvZ3JhbW1lIDcgdW5kZXIgR3JhbnQgQWdyZWVtZW50cyBOby4gMjM4ODc1IChHTjMpIGFuZCBOby4gNjA1MjQzIChHTjNwbHVzKSwKICogSG9yaXpvbiAyMDIwIHJlc2VhcmNoIGFuZCBpbm5vdmF0aW9uIHByb2dyYW1tZSB1bmRlciBHcmFudCBBZ3JlZW1lbnRzIE5vLiAKICogNjkxNTY3IChHTjQtMSkgYW5kIE5vLiA3MzExMjIgKEdONC0yKS4KICogT24gYmVoYWxmIG9mIHRoZSBhZm9yZW1lbnRpb25lZCBwcm9qZWN0cywgR0VBTlQgQXNzb2NpYXRpb24gaXMgdGhlIHNvbGUgb3duZXIKICogb2YgdGhlIGNvcHlyaWdodCBpbiBhbGwgbWF0ZXJpYWwgd2hpY2ggd2FzIGRldmVsb3BlZCBieSBhIG1lbWJlciBvZiB0aGUgR8OJQU5UCiAqIHByb2plY3QuIEfDiUFOVCBWZXJlbmlnaW5nIChBc3NvY2lhdGlvbikgaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBDaGFtYmVyIG9mIAogKiBDb21tZXJjZSBpbiBBbXN0ZXJkYW0gd2l0aCByZWdpc3RyYXRpb24gbnVtYmVyIDQwNTM1MTU1IGFuZCBvcGVyYXRlcyBpbiB0aGUgCiAqIFVLIGFzIGEgYnJhbmNoIG9mIEfDiUFOVCBWZXJlbmlnaW5nLgogKiAKICogUmVnaXN0ZXJlZCBvZmZpY2U6IEhvZWtlbnJvZGUgMywgMTEwMkJSIEFtc3RlcmRhbSwgVGhlIE5ldGhlcmxhbmRzLiAKICogVUsgYnJhbmNoIGFkZHJlc3M6IENpdHkgSG91c2UsIDEyNi0xMzAgSGlsbHMgUm9hZCwgQ2FtYnJpZGdlIENCMiAxUFEsIFVLCiAqCiAqIExpY2Vuc2U6IHNlZSB0aGUgd2ViL2NvcHlyaWdodC5pbmMucGhwIGZpbGUgaW4gdGhlIGZpbGUgc3RydWN0dXJlIG9yCiAqICAgICAgICAgIDxiYXNlX3VybD4vY29weXJpZ2h0LnBocCBhZnRlciBkZXBsb3lpbmcgdGhlIHNvZnR3YXJlCiAqLwoKcmVxdWlyZV9vbmNlIGRpcm5hbWUoZGlybmFtZShkaXJuYW1lKF9fRklMRV9fKSkpIC4gIi9jb25maWcvX2NvbmZpZy5waHAiOwoKJGxvZ2dlckluc3RhbmNlID0gbmV3IFxjb3JlXGNvbW1vblxMb2dnaW5nKCk7CiR2YWxpZGF0b3IgPSBuZXcgXHdlYlxsaWJcY29tbW9uXElucHV0VmFsaWRhdGlvbigpOwokbGFuZ3VhZ2VJbnN0YW5jZSA9IG5ldyBcY29yZVxjb21tb25cTGFuZ3VhZ2UoKTsKJGxhbmd1YWdlSW5zdGFuY2UtPnNldFRleHREb21haW4oImRpYWdub3N0aWNzIik7CgoKCiRhZGRpdGlvbmFsX21lc3NhZ2UgPSBbCiAgICBcY29yZVxjb21tb25cRW50aXR5OjpMX09LID0+ICcnLAogICAgXGNvcmVcY29tbW9uXEVudGl0eTo6TF9SRU1BUksgPT4gXygiU29tZSBwcm9wZXJ0aWVzIG9mIHRoZSBjb25uZWN0aW9uIGF0dGVtcHQgd2VyZSBzdWItb3B0aW1hbDsgdGhlIGxpc3QgaXMgYmVsb3cuIiksCiAgICBcY29yZVxjb21tb25cRW50aXR5OjpMX1dBUk4gPT4gXygiU29tZSBwcm9wZXJ0aWVzIG9mIHRoZSBjb25uZWN0aW9uIGF0dGVtcHQgd2VyZSBzdWItb3B0aW1hbDsgdGhlIGxpc3QgaXMgYmVsb3cuIiksCiAgICBcY29yZVxjb21tb25cRW50aXR5OjpMX0VSUk9SID0+IF8oIlNvbWUgY29uZmlndXJhdGlvbiBlcnJvcnMgd2VyZSBvYnNlcnZlZDsgdGhlIGxpc3QgaXMgYmVsb3cuIiksCl07CgovKioKICogcmV0dXJucyB0aGUgZnJpZW5kbHkgbmFtZSBvZiBhbiBFQVAgdHlwZQogKiAKICogQHBhcmFtIGFycmF5ICRlYXAgYXJyYXkgcmVwcmVzZW50YXRpb24gb2YgdGhlIEVBUCB0eXBlIHRvIGJlIHJldHVybmVkCiAqIEByZXR1cm4gc3RyaW5nIHRoZSBmcmllbmRseSBuYW1lCiAqLwpmdW5jdGlvbiBkaXNwX25hbWUoJGVhcCkgewogICAgJGRpc3BsYXlOYW1lID0gXGNvcmVcY29tbW9uXEVBUDo6ZWFwRGlzcGxheU5hbWUoJGVhcCk7CiAgICByZXR1cm4gJGRpc3BsYXlOYW1lWydPVVRFUiddIC4gKCAkZGlzcGxheU5hbWVbJ0lOTkVSJ10gIT0gJycgPyAnLScgLiAkZGlzcGxheU5hbWVbJ0lOTkVSJ10gOiAnJyk7Cn0KCmlmICghaXNzZXQoJF9SRVFVRVNUWyd0ZXN0X3R5cGUnXSkgfHwgISRfUkVRVUVTVFsndGVzdF90eXBlJ10pIHsKICAgIHRocm93IG5ldyBFeGNlcHRpb24oIk5vIHRlc3QgdHlwZSBzcGVjaWZpZWQhIik7Cn0KCiR0ZXN0X3R5cGUgPSAkX1JFUVVFU1RbJ3Rlc3RfdHlwZSddOwoKJGNoZWNrX3JlYWxtID0gJHZhbGlkYXRvci0+cmVhbG0oJF9SRVFVRVNUWydyZWFsbSddKTsKCmlmICgkY2hlY2tfcmVhbG0gPT09IEZBTFNFKSB7CiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCJJbnZhbGlkIHJlYWxtIHdhcyBzdWJtaXR0ZWQhIik7Cn0KCmlmIChpc3NldCgkX1JFUVVFU1RbJ3Byb2ZpbGVfaWQnXSkpIHsKICAgICRteV9wcm9maWxlID0gJHZhbGlkYXRvci0+UHJvZmlsZSgkX1JFUVVFU1RbJ3Byb2ZpbGVfaWQnXSk7CiAgICBpZiAoISRteV9wcm9maWxlIGluc3RhbmNlb2YgXGNvcmVcUHJvZmlsZVJBRElVUykgewogICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oIlJBRElVUyBUZXN0cyBjYW4gb25seSBiZSBwZXJmb3JtZWQgb24gUkFESVVTIFByb2ZpbGVzIChkJ29oISkiKTsKICAgIH0KICAgICR0ZXN0c3VpdGUgPSBuZXcgXGNvcmVcZGlhZ1xSQURJVVNUZXN0cygkY2hlY2tfcmVhbG0sICRteV9wcm9maWxlLT5nZXRSZWFsbUNoZWNrT3V0ZXJVc2VybmFtZSgpLCAkbXlfcHJvZmlsZS0+Z2V0RWFwTWV0aG9kc2luT3JkZXJPZlByZWZlcmVuY2UoMSksICRteV9wcm9maWxlLT5nZXRDb2xsYXBzZWRBdHRyaWJ1dGVzKClbJ2VhcDpzZXJ2ZXJfbmFtZSddLCAkbXlfcHJvZmlsZS0+Z2V0Q29sbGFwc2VkQXR0cmlidXRlcygpWydlYXA6Y2FfZmlsZSddKTsKfSBlbHNlIHsKICAgICRteV9wcm9maWxlID0gTlVMTDsKICAgICR0ZXN0c3VpdGUgPSBuZXcgXGNvcmVcZGlhZ1xSQURJVVNUZXN0cygkY2hlY2tfcmVhbG0sICJAIi4kY2hlY2tfcmVhbG0pOwp9CgoKJGhvc3RpbmRleCA9ICRfUkVRVUVTVFsnaG9zdGluZGV4J107CmlmICghaXNfbnVtZXJpYygkaG9zdGluZGV4KSkgewogICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigiVGhlIHJlcXVlc3RlZCBob3N0IGluZGV4IGlzIG5vdCBudW1lcmljISIpOwp9CgokcG9zdGVkX2hvc3QgPSAkX1JFUVVFU1RbJ3NyYyddOwppZiAoaXNfbnVtZXJpYygkcG9zdGVkX2hvc3QpKSB7IC8vIFVEUCB0ZXN0cywgdGhpcyBpcyBhbiBpbmRleCB0byB0aGUgdGVzdCBob3N0IGluIGNvbmZpZwogICAgJGhvc3QgPSBmaWx0ZXJfdmFyKENPTkZJR19ESUFHTk9TVElDU1snUkFESVVTVEVTVFMnXVsnVURQLWhvc3RzJ11bJGhvc3RpbmRleF1bJ2lwJ10sIEZJTFRFUl9WQUxJREFURV9JUCwgRklMVEVSX0ZMQUdfSVBWNCB8IEZJTFRFUl9GTEFHX0lQVjYgfCBGSUxURVJfRkxBR19OT19QUklWX1JBTkdFIHwgRklMVEVSX0ZMQUdfTk9fUkVTX1JBTkdFKTsKfSBlbHNlIHsgLy8gZHluYW1pYyBkaXNjb3ZlcnkgaG9zdCwgcG90ZW50aWFsbHkgdW52ZXR0ZWQgdXNlciBpbnB1dAogICAgLy8gY29udGFpbnMgcG9ydCBudW1iZXI7IG5lZWRzIHRvIGJlIHJlZGFjdGVkIGZvciBmaWx0ZXJfdmFyIHRvIHdvcmsKICAgIC8vIGluIGFueSBjYXNlLCBpdCdzIGEgcHJpbnRhYmxlIHN0cmluZywgc28gZmlsdGVyIGl0IGluaXRpYWxseQogICAgCiAgICAkZmlsdGVyZWRIb3N0ID0gZmlsdGVyX2lucHV0KElOUFVUX0dFVCwnc3JjJywgRklMVEVSX1NBTklUSVpFX1NUUklORykgPz8gZmlsdGVyX2lucHV0KElOUFVUX1BPU1QsJ3NyYycsIEZJTFRFUl9TQU5JVElaRV9TVFJJTkcpOwogICAgJGhvc3Rvbmx5MSA9IHByZWdfcmVwbGFjZSgnLzpbMC05XSokLycsICIiLCAkZmlsdGVyZWRIb3N0KTsKICAgICRob3N0b25seTIgPSBwcmVnX3JlcGxhY2UoJy9eXFsvJywgIiIsICRob3N0b25seTEpOwogICAgJGhvc3Rvbmx5MyA9IHByZWdfcmVwbGFjZSgnL1xdJC8nLCAiIiwgJGhvc3Rvbmx5Mik7CiAgICAkaG9zdG9ubHkgPSBmaWx0ZXJfdmFyKCRob3N0b25seTMsIEZJTFRFUl9WQUxJREFURV9JUCwgRklMVEVSX0ZMQUdfSVBWNCB8IEZJTFRFUl9GTEFHX0lQVjYgfCBGSUxURVJfRkxBR19OT19QUklWX1JBTkdFIHwgRklMVEVSX0ZMQUdfTk9fUkVTX1JBTkdFKTsKICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSB2YWxpZCBJUCBhZGRyZXNzCiAgICBpZiAoJGhvc3Rvbmx5ID09PSBGQUxTRSkgewogICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oIlRoZSBjb25maWd1cmVkIHRlc3QgaG9zdCAoJGhvc3Rvbmx5KSBpcyBub3QgYSB2YWxpZCBJUCBhZGRyZXNzIGZyb20gYWNjZXB0YWJsZSBJUCByYW5nZXMhIik7CiAgICB9CiAgICAvLyBob3N0IElQIGFkZHJlc3MgdGVzdGluZyBwYXNzZWQuIFNvIGxldCdzIHRha2Ugb3VyIHBvcnQgbnVtYmVyIGJhY2sKICAgICRob3N0ID0gJGZpbHRlcmVkSG9zdDsKICAgIAp9CgoKCiRyZXR1cm5hcnJheSA9IFtdOwokdGltZW91dCA9IENPTkZJR19ESUFHTk9TVElDU1snUkFESVVTVEVTVFMnXVsnVURQLWhvc3RzJ11bJGhvc3RpbmRleF1bJ3RpbWVvdXQnXTsKc3dpdGNoICgkdGVzdF90eXBlKSB7CiAgICBjYXNlICd1ZHBfbG9naW4nOgogICAgICAgICRpID0gMDsKICAgICAgICAkcmV0dXJuYXJyYXlbJ2hvc3RpbmRleCddID0gJGhvc3RpbmRleDsKICAgICAgICAkZWFwcyA9ICRteV9wcm9maWxlLT5nZXRFYXBNZXRob2RzaW5PcmRlck9mUHJlZmVyZW5jZSgxKTsKICAgICAgICAkdXNlcl9uYW1lID0gJHZhbGlkYXRvci0+VXNlcihpc3NldCgkX1JFUVVFU1RbJ3VzZXJuYW1lJ10pICYmICRfUkVRVUVTVFsndXNlcm5hbWUnXSA/ICRfUkVRVUVTVFsndXNlcm5hbWUnXSA6ICIiKTsKICAgICAgICAkb3V0ZXJfdXNlcl9uYW1lID0gJHZhbGlkYXRvci0+VXNlcihpc3NldCgkX1JFUVVFU1RbJ291dGVyX3VzZXJuYW1lJ10pICYmICRfUkVRVUVTVFsnb3V0ZXJfdXNlcm5hbWUnXSA/ICRfUkVRVUVTVFsnb3V0ZXJfdXNlcm5hbWUnXSA6ICR1c2VyX25hbWUpOwogICAgICAgICR0ZXN0c3VpdGUtPnNldE91dGVySWRlbnRpdHkoJG91dGVyX3VzZXJfbmFtZSk7CiAgICAgICAgJHVzZXJfcGFzc3dvcmQgPSBpc3NldCgkX1JFUVVFU1RbJ3Bhc3N3b3JkJ10pICYmICRfUkVRVUVTVFsncGFzc3dvcmQnXSA/ICRfUkVRVUVTVFsncGFzc3dvcmQnXSA6ICIiOyAvLyEhCiAgICAgICAgJHJldHVybmFycmF5WydyZXN1bHQnXSA9IFtdOwogICAgICAgIGZvcmVhY2ggKCRlYXBzIGFzICRlYXApIHsKICAgICAgICAgICAgaWYgKCRlYXAtPmdldEludGVnZXJSZXAoKSA9PSBcY29yZVxjb21tb25cRUFQOjpJTlRFR0VSX1RMUykgewogICAgICAgICAgICAgICAgJHJ1bl90ZXN0ID0gVFJVRTsKICAgICAgICAgICAgICAgIGlmICgkX0ZJTEVTWydjZXJ0J11bJ2Vycm9yJ10gPT0gVVBMT0FEX0VSUl9PSykgewogICAgICAgICAgICAgICAgICAgICRjbGllbnRjZXJ0ZGF0YSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRfRklMRVNbJ2NlcnQnXVsndG1wX25hbWUnXSk7CiAgICAgICAgICAgICAgICAgICAgJHByaXZrZXlfcGFzcyA9IGlzc2V0KCRfUkVRVUVTVFsncHJpdmtleV9wYXNzJ10pICYmICRfUkVRVUVTVFsncHJpdmtleV9wYXNzJ10gPyAkX1JFUVVFU1RbJ3ByaXZrZXlfcGFzcyddIDogIiI7IC8vISEKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJF9SRVFVRVNUWyd0bHNfdXNlcm5hbWUnXSkgJiYgJF9SRVFVRVNUWyd0bHNfdXNlcm5hbWUnXSkgewogICAgICAgICAgICAgICAgICAgICAgICAkdGxzX3VzZXJuYW1lID0gJHZhbGlkYXRvci0+VXNlcigkX1JFUVVFU1RbJ3Rsc191c2VybmFtZSddKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbnNzbF9wa2NzMTJfcmVhZCgkY2xpZW50Y2VydGRhdGEsICRjZXJ0cywgJHByaXZrZXlfcGFzcykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRteWRldGFpbHMgPSBvcGVuc3NsX3g1MDlfcGFyc2UoJGNlcnRzWydjZXJ0J10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRteWRldGFpbHNbJ3N1YmplY3QnXVsnQ04nXSkgJiYgJG15ZGV0YWlsc1snc3ViamVjdCddWydDTiddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRsc191c2VybmFtZSA9ICRteWRldGFpbHNbJ3N1YmplY3QnXVsnQ04nXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9nZ2VySW5zdGFuY2UtPmRlYnVnKDQsICJQS0NTMTItQ049JHRsc191c2VybmFtZVxuIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0ZXN0cmVzdWx0ID0gXGNvcmVcZGlhZ1xSQURJVVNUZXN0czo6UkVUVkFMX0lOQ09NUExFVEVfREFUQTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcnVuX3Rlc3QgPSBGQUxTRTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0ZXN0cmVzdWx0ID0gXGNvcmVcZGlhZ1xSQURJVVNUZXN0czo6UkVUVkFMX1dST05HX1BLQ1MxMl9QQVNTV09SRDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRydW5fdGVzdCA9IEZBTFNFOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkdGVzdHJlc3VsdCA9IFxjb3JlXGRpYWdcUkFESVVTVGVzdHM6OlJFVFZBTF9JTkNPTVBMRVRFX0RBVEE7CiAgICAgICAgICAgICAgICAgICAgJHJ1bl90ZXN0ID0gRkFMU0U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJHJ1bl90ZXN0KSB7CiAgICAgICAgICAgICAgICAgICAgJGxvZ2dlckluc3RhbmNlLT5kZWJ1Zyg0LCAiVExTLVVTRVJOQU1FPSR0bHNfdXNlcm5hbWVcbiIpOwogICAgICAgICAgICAgICAgICAgICR0ZXN0cmVzdWx0ID0gJHRlc3RzdWl0ZS0+dWRwTG9naW4oJGhvc3RpbmRleCwgJGVhcC0+Z2V0QXJyYXlSZXAoKSwgJHRsc191c2VybmFtZSwgJHByaXZrZXlfcGFzcywgVFJVRSwgVFJVRSwgJGNsaWVudGNlcnRkYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICR0ZXN0cmVzdWx0ID0gJHRlc3RzdWl0ZS0+dWRwTG9naW4oJGhvc3RpbmRleCwgJGVhcC0+Z2V0QXJyYXlSZXAoKSwgJHVzZXJfbmFtZSwgJHVzZXJfcGFzc3dvcmQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRyZXR1cm5hcnJheVsncmVzdWx0J11bJGldID0gJHRlc3RzdWl0ZS0+Y29uc29saWRhdGVVZHBSZXN1bHQoJGhvc3RpbmRleCk7CiAgICAgICAgICAgICRyZXR1cm5hcnJheVsncmVzdWx0J11bJGldWydlYXAnXSA9ICRlYXAtPmdldFByaW50YWJsZVJlcCgpOwogICAgICAgICAgICAkcmV0dXJuYXJyYXlbJ3JldHVybmNvZGUnXVskaV0gPSAkdGVzdHJlc3VsdDsKCgogICAgICAgICAgICBzd2l0Y2ggKCR0ZXN0cmVzdWx0KSB7CiAgICAgICAgICAgICAgICBjYXNlIFxjb3JlXGRpYWdcUkFESVVTVGVzdHM6OlJFVFZBTF9PSzoKICAgICAgICAgICAgICAgICAgICAkbGV2ZWwgPSAkcmV0dXJuYXJyYXlbJ3Jlc3VsdCddWyRpXVsnbGV2ZWwnXTsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRsZXZlbCkgewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxjb3JlXGNvbW1vblxFbnRpdHk6OkxfT0s6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZSA9IF8oIjxzdHJvbmc+VGVzdCBzdWNjZXNzZnVsLjwvc3Ryb25nPiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXGNvcmVcY29tbW9uXEVudGl0eTo6TF9SRU1BUks6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXGNvcmVcY29tbW9uXEVudGl0eTo6TF9XQVJOOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1lc3NhZ2UgPSBfKCI8c3Ryb25nPlRlc3QgcGFydGlhbGx5IHN1Y2Nlc3NmdWw8L3N0cm9uZz46IGF1dGhlbnRpY2F0aW9uIHN1Y2NlZGVkLiIpIC4gJyAnIC4gJGFkZGl0aW9uYWxfbWVzc2FnZVskbGV2ZWxdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXGNvcmVcY29tbW9uXEVudGl0eTo6TF9FUlJPUjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gXygiPHN0cm9uZz5UZXN0IEZBSUxFRDwvc3Ryb25nPjogYXV0aGVudGljYXRpb24gc3VjY2VkZWQuIikgLiAnICcgLiAkYWRkaXRpb25hbF9tZXNzYWdlWyRsZXZlbF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIFxjb3JlXGRpYWdcUkFESVVTVGVzdHM6OlJFVFZBTF9DT05WRVJTQVRJT05fUkVKRUNUOgogICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gXygiPHN0cm9uZz5UZXN0IEZBSUxFRDwvc3Ryb25nPjogdGhlIHJlcXVlc3Qgd2FzIHJlamVjdGVkLiBUaGUgbW9zdCBsaWtlbHkgY2F1c2UgaXMgdGhhdCB5b3UgaGF2ZSBtaXNzcGVsdCB0aGUgVXNlcm5hbWUgYW5kL29yIHRoZSBQYXNzd29yZC4iKTsKICAgICAgICAgICAgICAgICAgICAkbGV2ZWwgPSBcY29yZVxjb21tb25cRW50aXR5OjpMX0VSUk9SOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBcY29yZVxkaWFnXFJBRElVU1Rlc3RzOjpSRVRWQUxfTk9UQ09ORklHVVJFRDoKICAgICAgICAgICAgICAgICAgICAkbGV2ZWwgPSBcY29yZVxjb21tb25cRW50aXR5OjpMX0VSUk9SOwogICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gXygiVGhpcyBtZXRob2QgY2Fubm90IGJlIHRlc3RlZCIpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBcY29yZVxkaWFnXFJBRElVU1Rlc3RzOjpSRVRWQUxfSU1NRURJQVRFX1JFSkVDVDoKICAgICAgICAgICAgICAgICAgICAkbGV2ZWwgPSBcY29yZVxjb21tb25cRW50aXR5OjpMX0VSUk9SOwogICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gXygiPHN0cm9uZz5UZXN0IEZBSUxFRDwvc3Ryb25nPjogdGhlIHJlcXVlc3Qgd2FzIHJlamVjdGVkIGltbWVkaWF0ZWx5LCB3aXRob3V0IEVBUCBjb252ZXJzYXRpb24uIEVpdGhlciB5b3UgaGF2ZSBtaXNzcGVsdCB0aGUgVXNlcm5hbWUgb3IgdGhlcmUgaXMgc29tZXRoaW5nIHNlcmlvdXNseSB3cm9uZyB3aXRoIHlvdXIgc2VydmVyLiIpOwogICAgICAgICAgICAgICAgICAgIHVuc2V0KCRyZXR1cm5hcnJheVsncmVzdWx0J11bJGldWydjZXJ0X29kZGl0aWVzJ10pOwogICAgICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsncmVzdWx0J11bJGldWydzZXJ2ZXInXSA9IDA7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIFxjb3JlXGRpYWdcUkFESVVTVGVzdHM6OlJFVFZBTF9OT19SRVNQT05TRToKICAgICAgICAgICAgICAgICAgICAkbGV2ZWwgPSBcY29yZVxjb21tb25cRW50aXR5OjpMX0VSUk9SOwogICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gc3ByaW50ZihfKCI8c3Ryb25nPlRlc3QgRkFJTEVEPC9zdHJvbmc+OiBubyByZXBseSBmcm9tIHRoZSBSQURJVVMgc2VydmVyIGFmdGVyICVkIHNlY29uZHMuIEVpdGhlciB0aGUgcmVzcG9uc2libGUgc2VydmVyIGlzIGRvd24sIG9yIHJvdXRpbmcgaXMgYnJva2VuISIpLCAkdGltZW91dCk7CiAgICAgICAgICAgICAgICAgICAgdW5zZXQoJHJldHVybmFycmF5WydyZXN1bHQnXVskaV1bJ2NlcnRfb2RkaXRpZXMnXSk7CiAgICAgICAgICAgICAgICAgICAgJHJldHVybmFycmF5WydyZXN1bHQnXVskaV1bJ3NlcnZlciddID0gMDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgXGNvcmVcZGlhZ1xSQURJVVNUZXN0czo6UkVUVkFMX1NFUlZFUl9VTkZJTklTSEVEX0NPTU06CiAgICAgICAgICAgICAgICAgICAgJHJldHVybmFycmF5WydtZXNzYWdlJ10gPSBzcHJpbnRmKF8oIjxzdHJvbmc+VGVzdCBGQUlMRUQ8L3N0cm9uZz46IHRoZXJlIHdhcyBhIGJpZGlyZWN0aW9uYWwgUkFESVVTIGNvbnZlcnNhdGlvbiwgYnV0IGl0IGRpZCBub3QgZmluaXNoIGFmdGVyICVkIHNlY29uZHMhIiksICR0aW1lb3V0KTsKICAgICAgICAgICAgICAgICAgICAkcmV0dXJuYXJyYXlbJ2xldmVsJ10gPSBcY29yZVxjb21tb25cRW50aXR5OjpMX0VSUk9SOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAkbGV2ZWwgPSBpc3NldCgkdGVzdHN1aXRlLT5yZXR1cm5Db2Rlc1skdGVzdHJlc3VsdF1bJ3NldmVyaXR5J10pID8gJHRlc3RzdWl0ZS0+cmV0dXJuQ29kZXNbJHRlc3RyZXN1bHRdWydzZXZlcml0eSddIDogXGNvcmVcY29tbW9uXEVudGl0eTo6TF9FUlJPUjsKICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZSA9IGlzc2V0KCR0ZXN0c3VpdGUtPnJldHVybkNvZGVzWyR0ZXN0cmVzdWx0XVsnbWVzc2FnZSddKSA/ICR0ZXN0c3VpdGUtPnJldHVybkNvZGVzWyR0ZXN0cmVzdWx0XVsnbWVzc2FnZSddIDogXygiPHN0cm9uZz5UZXN0IEZBSUxFRDwvc3Ryb25nPiIpOwogICAgICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsncmVzdWx0J11bJGldWydzZXJ2ZXInXSA9IDA7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHJldHVybmFycmF5WydyZXN1bHQnXVskaV1bJ2xldmVsJ10gPSAkbGV2ZWw7CiAgICAgICAgICAgICRyZXR1cm5hcnJheVsncmVzdWx0J11bJGldWydtZXNzYWdlJ10gPSAkbWVzc2FnZTsKICAgICAgICAgICAgJGkrKzsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICBjYXNlICd1ZHAnOgogICAgICAgICRpID0gMDsKICAgICAgICAkcmV0dXJuYXJyYXlbJ2hvc3RpbmRleCddID0gJGhvc3RpbmRleDsKICAgICAgICAkdGVzdHJlc3VsdCA9ICR0ZXN0c3VpdGUtPnVkcFJlYWNoYWJpbGl0eSgkaG9zdGluZGV4KTsKICAgICAgICAkcmV0dXJuYXJyYXlbJ3Jlc3VsdCddWyRpXSA9ICR0ZXN0c3VpdGUtPmNvbnNvbGlkYXRlVWRwUmVzdWx0KCRob3N0aW5kZXgpOwogICAgICAgICRyZXR1cm5hcnJheVsncmVzdWx0J11bJGldWydlYXAnXSA9ICdBTEwnOwogICAgICAgICRyZXR1cm5hcnJheVsncmV0dXJuY29kZSddWyRpXSA9ICR0ZXN0cmVzdWx0OwogICAgICAgIC8vIGEgZmFpbGVkIGNoZWNrIG1heSBub3QgaGF2ZSBnb3R0ZW4gYW55IGNlcnRpZmljYXRlLCBiZSBwcmVwYXJlZCBmb3IgdGhhdAogICAgICAgIHN3aXRjaCAoJHRlc3RyZXN1bHQpIHsKICAgICAgICAgICAgY2FzZSBcY29yZVxkaWFnXFJBRElVU1Rlc3RzOjpSRVRWQUxfQ09OVkVSU0FUSU9OX1JFSkVDVDoKICAgICAgICAgICAgICAgICRsZXZlbCA9ICRyZXR1cm5hcnJheVsncmVzdWx0J11bJGldWydsZXZlbCddOwogICAgICAgICAgICAgICAgaWYgKCRsZXZlbCA+IFxjb3JlXGNvbW1vblxFbnRpdHk6OkxfT0spIHsKICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZSA9IF8oIjxzdHJvbmc+VGVzdCBwYXJ0aWFsbHkgc3VjY2Vzc2Z1bDwvc3Ryb25nPjogYSBiaWRpcmVjdGlvbmFsIFJBRElVUyBjb252ZXJzYXRpb24gd2l0aCBtdWx0aXBsZSByb3VuZC10cmlwcyB3YXMgY2FycmllZCBvdXQsIGFuZCBlbmRlZCBpbiBhbiBBY2Nlc3MtUmVqZWN0IGFzIHBsYW5uZWQuIikgLiAnICcgLiAkYWRkaXRpb25hbF9tZXNzYWdlWyRsZXZlbF07CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gXygiPHN0cm9uZz5UZXN0IHN1Y2Nlc3NmdWw8L3N0cm9uZz46IGEgYmlkaXJlY3Rpb25hbCBSQURJVVMgY29udmVyc2F0aW9uIHdpdGggbXVsdGlwbGUgcm91bmQtdHJpcHMgd2FzIGNhcnJpZWQgb3V0LCBhbmQgZW5kZWQgaW4gYW4gQWNjZXNzLVJlamVjdCBhcyBwbGFubmVkLiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgXGNvcmVcZGlhZ1xSQURJVVNUZXN0czo6UkVUVkFMX0lNTUVESUFURV9SRUpFQ1Q6CiAgICAgICAgICAgICAgICAkbWVzc2FnZSA9IF8oIjxzdHJvbmc+VGVzdCBGQUlMRUQ8L3N0cm9uZz46IHRoZSByZXF1ZXN0IHdhcyByZWplY3RlZCBpbW1lZGlhdGVseSwgd2l0aG91dCBFQVAgY29udmVyc2F0aW9uLiBUaGlzIGlzIG5vdCBuZWNlc3NhcmlseSBhbiBlcnJvcjogaWYgdGhlIFJBRElVUyBzZXJ2ZXIgZW5mb3JjZXMgdGhhdCBvdXRlciBpZGVudGl0aWVzIGNvcnJlc3BvbmQgdG8gYW4gZXhpc3RpbmcgdXNlcm5hbWUsIHRoZW4gdGhpcyByZXN1bHQgaXMgZXhwZWN0ZWQgKE5vdGU6IHlvdSBjb3VsZCBjb25maWd1cmUgYSB2YWxpZCBvdXRlciBpZGVudGl0eSBpbiB5b3VyIHByb2ZpbGUgc2V0dGluZ3MgdG8gZ2V0IHBhc3QgdGhpcyBodXJkbGUpLiBJbiBhbGwgb3RoZXIgY2FzZXMsIHRoZSBzZXJ2ZXIgYXBwZWFycyBtaXNjb25maWd1cmVkIG9yIGl0IGlzIHVucmVhY2hhYmxlLiIpOwogICAgICAgICAgICAgICAgJGxldmVsID0gXGNvcmVcY29tbW9uXEVudGl0eTo6TF9XQVJOOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgXGNvcmVcZGlhZ1xSQURJVVNUZXN0czo6UkVUVkFMX05PX1JFU1BPTlNFOgogICAgICAgICAgICAgICAgJHJldHVybmFycmF5WydyZXN1bHQnXVskaV1bJ3NlcnZlciddID0gMDsKICAgICAgICAgICAgICAgICRtZXNzYWdlID0gc3ByaW50ZihfKCI8c3Ryb25nPlRlc3QgRkFJTEVEPC9zdHJvbmc+OiBubyByZXBseSBmcm9tIHRoZSBSQURJVVMgc2VydmVyIGFmdGVyICVkIHNlY29uZHMuIEVpdGhlciB0aGUgcmVzcG9uc2libGUgc2VydmVyIGlzIGRvd24sIG9yIHJvdXRpbmcgaXMgYnJva2VuISIpLCAkdGltZW91dCk7CiAgICAgICAgICAgICAgICAkbGV2ZWwgPSBcY29yZVxjb21tb25cRW50aXR5OjpMX0VSUk9SOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgXGNvcmVcZGlhZ1xSQURJVVNUZXN0czo6UkVUVkFMX1NFUlZFUl9VTkZJTklTSEVEX0NPTU06CiAgICAgICAgICAgICAgICAkbWVzc2FnZSA9IHNwcmludGYoXygiPHN0cm9uZz5UZXN0IEZBSUxFRDwvc3Ryb25nPjogdGhlcmUgd2FzIGEgYmlkaXJlY3Rpb25hbCBSQURJVVMgY29udmVyc2F0aW9uLCBidXQgaXQgZGlkIG5vdCBmaW5pc2ggYWZ0ZXIgJWQgc2Vjb25kcyEiKSwgJHRpbWVvdXQpOwogICAgICAgICAgICAgICAgJGxldmVsID0gXGNvcmVcY29tbW9uXEVudGl0eTo6TF9FUlJPUjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgJG1lc3NhZ2UgPSBfKCJ1bmhhbmRsZWQgZXJyb3IiKTsKICAgICAgICAgICAgICAgICRsZXZlbCA9IFxjb3JlXGNvbW1vblxFbnRpdHk6OkxfRVJST1I7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgJGxvZ2dlckluc3RhbmNlLT5kZWJ1Zyg0LCAiU0VSVkVSPSIgLiAkcmV0dXJuYXJyYXlbJ3Jlc3VsdCddWyRpXVsnc2VydmVyJ10gLiAiXG4iKTsKICAgICAgICAkcmV0dXJuYXJyYXlbJ3Jlc3VsdCddWyRpXVsnbGV2ZWwnXSA9ICRsZXZlbDsKICAgICAgICAkcmV0dXJuYXJyYXlbJ3Jlc3VsdCddWyRpXVsnbWVzc2FnZSddID0gJG1lc3NhZ2U7CiAgICAgICAgYnJlYWs7CiAgICBjYXNlICdjYXBhdGgnOgogICAgICAgICRyZmM2NjE0c3VpdGUgPSBuZXcgXGNvcmVcZGlhZ1xSRkM2NjE0VGVzdHMoWyRob3N0XSk7CiAgICAgICAgJHRlc3RyZXN1bHQgPSAkcmZjNjYxNHN1aXRlLT5jQXBhdGhDaGVjaygkaG9zdCk7CiAgICAgICAgJHJldHVybmFycmF5WydJUCddID0gJGhvc3Q7CiAgICAgICAgJHJldHVybmFycmF5Wydob3N0aW5kZXgnXSA9ICRob3N0aW5kZXg7CiAgICAgICAgLy8gdGhlIGhvc3QgbWVtYmVyIG9mIHRoZSBhcnJheSBtYXkgbm90IGJlIHNldCBpZiBSRVRWQUxfU0tJUFBFRCB3YXMKICAgICAgICAvLyByZXR1cm5lZCAoZS5nLiBJUHY2IGhvc3QpLCBiZSBwcmVwYXJlZCBmb3IgdGhhdAogICAgICAgIGlmIChpc3NldCgkcmZjNjYxNHN1aXRlLT5UTFNfQ0FfY2hlY2tzX3Jlc3VsdFskaG9zdF0pKSB7CiAgICAgICAgICAgICRyZXR1cm5hcnJheVsndGltZV9taWxsaXNlYyddID0gc3ByaW50ZigiJWQiLCAkcmZjNjYxNHN1aXRlLT5UTFNfQ0FfY2hlY2tzX3Jlc3VsdFskaG9zdF1bJ3RpbWVfbWlsbGlzZWMnXSk7CiAgICAgICAgICAgIGlmIChpc3NldCgkcmZjNjYxNHN1aXRlLT5UTFNfQ0FfY2hlY2tzX3Jlc3VsdFskaG9zdF1bJ2NlcnRfb2RkaXR5J10pICYmICgkcmZjNjYxNHN1aXRlLT5UTFNfQ0FfY2hlY2tzX3Jlc3VsdFskaG9zdF1bJ2NlcnRfb2RkaXR5J10gPT0gXGNvcmVcZGlhZ1xSQURJVVNUZXN0czo6Q0VSVFBST0JfVU5LTk9XTl9DQSkpIHsKICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsnbWVzc2FnZSddID0gXygiPHN0cm9uZz5FUlJPUjwvc3Ryb25nPjogdGhlIHNlcnZlciBwcmVzZW50ZWQgYSBjZXJ0aWZpY2F0ZSB3aGljaCBpcyBmcm9tIGFuIHVua25vd24gYXV0aG9yaXR5ISIpIC4gJyAoJyAuIHNwcmludGYoXygiZWxhcHNlZCB0aW1lOiAlZCIpLCAkcmZjNjYxNHN1aXRlLT5UTFNfQ0FfY2hlY2tzX3Jlc3VsdFskaG9zdF1bJ3RpbWVfbWlsbGlzZWMnXSkgLiAnJm5ic3A7bXMpJzsKICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsnbGV2ZWwnXSA9IFxjb3JlXGNvbW1vblxFbnRpdHk6OkxfRVJST1I7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkcmV0dXJuYXJyYXlbJ21lc3NhZ2UnXSA9ICRyZmM2NjE0c3VpdGUtPnJldHVybkNvZGVzWyRyZmM2NjE0c3VpdGUtPlRMU19DQV9jaGVja3NfcmVzdWx0WyRob3N0XVsnc3RhdHVzJ11dWyJtZXNzYWdlIl07CiAgICAgICAgICAgICAgICAkcmV0dXJuYXJyYXlbJ2xldmVsJ10gPSBcY29yZVxjb21tb25cRW50aXR5OjpMX09LOwogICAgICAgICAgICAgICAgaWYgKCRyZmM2NjE0c3VpdGUtPlRMU19DQV9jaGVja3NfcmVzdWx0WyRob3N0XVsnc3RhdHVzJ10gIT0gXGNvcmVcZGlhZ1xSQURJVVNUZXN0czo6UkVUVkFMX0NPTk5FQ1RJT05fUkVGVVNFRCkgewogICAgICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsnbWVzc2FnZSddIC49ICcgKCcgLiBzcHJpbnRmKF8oImVsYXBzZWQgdGltZTogJWQiKSwgJHJmYzY2MTRzdWl0ZS0+VExTX0NBX2NoZWNrc19yZXN1bHRbJGhvc3RdWyd0aW1lX21pbGxpc2VjJ10pIC4gJyZuYnNwO21zKSc7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsnbGV2ZWwnXSA9IFxjb3JlXGNvbW1vblxFbnRpdHk6OkxfRVJST1I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJHJmYzY2MTRzdWl0ZS0+VExTX0NBX2NoZWNrc19yZXN1bHRbJGhvc3RdWydzdGF0dXMnXSA9PSBcY29yZVxkaWFnXFJBRElVU1Rlc3RzOjpSRVRWQUxfT0spIHsKICAgICAgICAgICAgICAgICAgICAkcmV0dXJuYXJyYXlbJ2NlcnRkYXRhJ10gPSBbXTsKICAgICAgICAgICAgICAgICAgICAkcmV0dXJuYXJyYXlbJ2NlcnRkYXRhJ11bJ3N1YmplY3QnXSA9ICRyZmM2NjE0c3VpdGUtPlRMU19DQV9jaGVja3NfcmVzdWx0WyRob3N0XVsnY2VydGRhdGEnXVsnc3ViamVjdCddOwogICAgICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsnY2VydGRhdGEnXVsnaXNzdWVyJ10gPSAkcmZjNjYxNHN1aXRlLT5UTFNfQ0FfY2hlY2tzX3Jlc3VsdFskaG9zdF1bJ2NlcnRkYXRhJ11bJ2lzc3VlciddOwogICAgICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsnY2VydGRhdGEnXVsnZXh0ZW5zaW9ucyddID0gW107CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRyZmM2NjE0c3VpdGUtPlRMU19DQV9jaGVja3NfcmVzdWx0WyRob3N0XVsnY2VydGRhdGEnXVsnZXh0ZW5zaW9ucyddWydzdWJqZWN0YWx0bmFtZSddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcmV0dXJuYXJyYXlbJ2NlcnRkYXRhJ11bJ2V4dGVuc2lvbnMnXVsnc3ViamVjdGFsdG5hbWUnXSA9ICRyZmM2NjE0c3VpdGUtPlRMU19DQV9jaGVja3NfcmVzdWx0WyRob3N0XVsnY2VydGRhdGEnXVsnZXh0ZW5zaW9ucyddWydzdWJqZWN0YWx0bmFtZSddOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHJmYzY2MTRzdWl0ZS0+VExTX0NBX2NoZWNrc19yZXN1bHRbJGhvc3RdWydjZXJ0ZGF0YSddWydleHRlbnNpb25zJ11bJ3BvbGljeW9pZCddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcmV0dXJuYXJyYXlbJ2NlcnRkYXRhJ11bJ2V4dGVuc2lvbnMnXVsncG9saWNpZXMnXSA9IGpvaW4oJyAnLCAkcmZjNjYxNHN1aXRlLT5UTFNfQ0FfY2hlY2tzX3Jlc3VsdFskaG9zdF1bJ2NlcnRkYXRhJ11bJ2V4dGVuc2lvbnMnXVsncG9saWN5b2lkJ10pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHJmYzY2MTRzdWl0ZS0+VExTX0NBX2NoZWNrc19yZXN1bHRbJGhvc3RdWydjZXJ0ZGF0YSddWydleHRlbnNpb25zJ11bJ2NybERpc3RyaWJ1dGlvblBvaW50J10pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRyZXR1cm5hcnJheVsnY2VydGRhdGEnXVsnZXh0ZW5zaW9ucyddWydjcmxkaXN0cmlidXRpb25wb2ludHMnXSA9ICRyZmM2NjE0c3VpdGUtPlRMU19DQV9jaGVja3NfcmVzdWx0WyRob3N0XVsnY2VydGRhdGEnXVsnZXh0ZW5zaW9ucyddWydjcmxEaXN0cmlidXRpb25Qb2ludCddOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHJmYzY2MTRzdWl0ZS0+VExTX0NBX2NoZWNrc19yZXN1bHRbJGhvc3RdWydjZXJ0ZGF0YSddWydleHRlbnNpb25zJ11bJ2F1dGhvcml0eUluZm9BY2Nlc3MnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHJldHVybmFycmF5WydjZXJ0ZGF0YSddWydleHRlbnNpb25zJ11bJ2F1dGhvcml0eWluZm9hY2Nlc3MnXSA9ICRyZmM2NjE0c3VpdGUtPlRMU19DQV9jaGVja3NfcmVzdWx0WyRob3N0XVsnY2VydGRhdGEnXVsnZXh0ZW5zaW9ucyddWydhdXRob3JpdHlJbmZvQWNjZXNzJ107CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHJldHVybmFycmF5WydjZXJ0X29kZGl0aWVzJ10gPSBbXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkcmV0dXJuYXJyYXlbJ3Jlc3VsdCddID0gJHRlc3RyZXN1bHQ7CiAgICAgICAgYnJlYWs7CiAgICBjYXNlICdjbGllbnRzJzoKICAgICAgICAkcmZjNjYxNHN1aXRlID0gbmV3IFxjb3JlXGRpYWdcUkZDNjYxNFRlc3RzKFskaG9zdF0pOwogICAgICAgICR0ZXN0cmVzdWx0ID0gJHJmYzY2MTRzdWl0ZS0+dGxzQ2xpZW50U2lkZUNoZWNrKCRob3N0KTsKICAgICAgICAkcmV0dXJuYXJyYXlbJ0lQJ10gPSAkaG9zdDsKICAgICAgICAkcmV0dXJuYXJyYXlbJ2hvc3RpbmRleCddID0gJGhvc3RpbmRleDsKICAgICAgICAkayA9IDA7CiAgICAgICAgLy8gdGhlIGhvc3QgbWVtYmVyIG9mIHRoZSBhcnJheSBtYXkgbm90IGV4aXN0IGlmIFJFVFZBTF9TS0lQUEVEIGNhbWUgb3V0CiAgICAgICAgLy8gKGUuZy4gbm8gY2xpZW50IGNlcnQgdG8gdGVzdCB3aXRoKS4gQmUgcHJlcGFyZWQgZm9yIHRoYXQKICAgICAgICBpZiAoaXNzZXQoJHJmYzY2MTRzdWl0ZS0+VExTX2NsaWVudHNfY2hlY2tzX3Jlc3VsdFskaG9zdF0pKSB7CiAgICAgICAgICAgIGZvcmVhY2ggKCRyZmM2NjE0c3VpdGUtPlRMU19jbGllbnRzX2NoZWNrc19yZXN1bHRbJGhvc3RdWydjYSddIGFzICR0eXBlID0+ICRjbGkpIHsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRjbGkgYXMgJGtleSA9PiAkdmFsKSB7CiAgICAgICAgICAgICAgICAgICAgJHJldHVybmFycmF5WydjYSddWyRrXVska2V5XSA9ICR2YWw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkaysrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRyZXR1cm5hcnJheVsncmVzdWx0J10gPSAkdGVzdHJlc3VsdDsKICAgICAgICBicmVhazsKCiAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oIlVua25vd24gdGVzdCByZXF1ZXN0ZWQ6IGRlZmF1bHQgY2FzZSByZWFjaGVkISIpOwp9CgplY2hvKGpzb25fZW5jb2RlKCRyZXR1cm5hcnJheSkpOwoKIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjE6e3M6MTI6IlxkaXNwX25hbWUoKSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8iOjU6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjEyOiJcZGlzcF9uYW1lKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo5OiJkaXNwX25hbWUiO31zOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjM6ImVhcCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjQwOiJyZXR1cm5zIHRoZSBmcmllbmRseSBuYW1lIG9mIGFuIEVBUCB0eXBlIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjI6e2k6MDtPOjQ0OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbSI6NTp7czo3OiIAKgBuYW1lIjtzOjU6InBhcmFtIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0AdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoxOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX19fXM6NTg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQB2YXJpYWJsZU5hbWUiO3M6MzoiZWFwIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0AaXNWYXJpYWRpYyI7YjowO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjUxOiJhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGUgRUFQIHR5cGUgdG8gYmUgcmV0dXJuZWQiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX1pOjE7Tzo0NjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUmV0dXJuXyI6Mzp7czo3OiIAKgBuYW1lIjtzOjY6InJldHVybiI7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJldHVybl8AdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31zOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoxNzoidGhlIGZyaWVuZGx5IG5hbWUiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6Mzg7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX19czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ=='));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

