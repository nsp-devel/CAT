<?php 
/* Cachekey: cache/stash_default/documentation\api\php\33c932dd039098f165ea1baf88563f8f/ */
/* Type: array */
/* Expiration: 2019-04-13T15:52:35+00:00 */



$loaded = true;
$expiration = 1555170755;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

