<?php 
/* Cachekey: cache/stash_default/documentation\api\php\f7a75f84cdbac73ed4cc705ff18ff9b7/ */
/* Type: array */
/* Expiration: 2019-04-13T20:54:06+00:00 */



$loaded = true;
$expiration = 1555188846;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

