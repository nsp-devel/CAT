<?php 
/* Cachekey: cache/stash_default/documentation\api\php\bfa6f5b615e71940eadb60c9185f9e41/ */
/* Type: array */
/* Expiration: 2019-04-13T19:05:12+00:00 */



$loaded = true;
$expiration = 1555182312;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554790111;

